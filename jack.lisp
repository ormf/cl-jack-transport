;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :jack-transport)

;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("jack_get_version" jack-get-version) :void
  (major-ptr :pointer)
  (minor-ptr :pointer)
  (micro-ptr :pointer)
  (proto-ptr :pointer))

(cffi:defcfun ("jack_get_version_string" jack-get-version-string) :string)

(cffi:defcfun ("jack_client_open" jack-client-open) :pointer
  (client-name :string)
  (options JackOptions)
  (status :pointer)
  &rest)

(cffi:defcfun ("jack_client_new" jack_client_new) :pointer
  (client-name :string))

(cffi:defcfun ("jack_client_close" jack-client-close) :int
  (client :pointer))

(cffi:defcfun ("jack_client_name_size" jack-client-name-size) :int)

(cffi:defcfun ("jack_get_client_name" jack-get-client-name) :string
  (client :pointer))

(cffi:defcfun ("jack_get_uuid_for_client_name" jack-get-uuid-for-client-name) :string
  (client :pointer)
  (client-name :string))

(cffi:defcfun ("jack_get_client_name_by_uuid" jack-get-client-name-by-uuid) :string
  (client :pointer)
  (client-uuid :string))

(cffi:defcfun ("jack_internal_client_new" jack-internal-client-new) :int
  (client-name :string)
  (load-name :string)
  (load-init :string))

(cffi:defcfun ("jack_internal_client_close" jack-internal-client-close) :void
  (client-name :string))

(cffi:defcfun ("jack_activate" jack-activate) :int
  (client :pointer))

(cffi:defcfun ("jack_deactivate" jack-deactivate) :int
  (client :pointer))

(cffi:defcfun ("jack_get_client_pid" jack-get-client-pid) :int
  (name :string))

(cffi:defcfun ("jack_client_thread_id" jack-client-thread-id) :pointer
  (client :pointer))

(cffi:defcfun ("jack_is_realtime" jack-is-realtime) :int
  (client :pointer))

(cffi:defcfun ("jack_thread_wait" jack-thread-wait) :pointer
  (client :pointer)
  (status :int))

(cffi:defcfun ("jack_cycle_wait" jack-cycle-wait) :pointer
  (client :pointer))

(cffi:defcfun ("jack_cycle_signal" jack-cycle-signal) :void
  (client :pointer)
  (status :int))

(cffi:defcfun ("jack_set_process_thread" jack-set-process-thread) :int
  (client :pointer)
  (thread-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_thread_init_callback" jack-set-thread-init-callback) :int
  (client :pointer)
  (thread-init-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_on_shutdown" jack-on-shutdown) :void
  (client :pointer)
  (shutdown-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_on_info_shutdown" jack-on-info-shutdown) :void
  (client :pointer)
  (shutdown-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_process_callback" jack-set-process-callback) :int
  (client :pointer)
  (process-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_freewheel_callback" jack-set-freewheel-callback) :int
  (client :pointer)
  (freewheel-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_buffer_size_callback" jack-set-buffer-size-callback) :int
  (client :pointer)
  (bufsize-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_sample_rate_callback" jack-set-sample-rate-callback) :int
  (client :pointer)
  (srate-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_client_registration_callback" jack-set-client-registration-callback) :int
  (client :pointer)
  (registration-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_port_registration_callback" jack-set-port-registration-callback) :int
  (client :pointer)
  (registration-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_port_connect_callback" jack-set-port-connect-callback) :int
  (client :pointer)
  (connect-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_port_rename_callback" jack-set-port-rename-callback) :int
  (client :pointer)
  (rename-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_graph_order_callback" jack-set-graph-order-callback) :int
  (client :pointer)
  (graph-callback :pointer)
  (arg2 :pointer))

(cffi:defcfun ("jack_set_xrun_callback" jack-set-xrun-callback) :int
  (client :pointer)
  (xrun-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_latency_callback" jack-set-latency-callback) :int
  (client :pointer)
  (latency-callback :pointer)
  (arg2 :pointer))

(cffi:defcfun ("jack_set_freewheel" jack-set-freewheel) :int
  (client :pointer)
  (onoff :int))

(cffi:defcfun ("jack_set_buffer_size" jack-set-buffer-size) :int
  (client :pointer)
  (nframes :pointer))

(cffi:defcfun ("jack_get_sample_rate" jack-get-sample-rate) :pointer
  (arg0 :pointer))

(cffi:defcfun ("jack_get_buffer_size" jack-get-buffer-size) :pointer
  (arg0 :pointer))

(cffi:defcfun ("jack_engine_takeover_timebase" jack-engine-takeover-timebase) :int
  (arg0 :pointer))

(cffi:defcfun ("jack_cpu_load" jack-cpu-load) :float
  (client :pointer))

(cffi:defcfun ("jack_port_register" jack-port-register) :pointer
  (client :pointer)
  (port-name :string)
  (port-type :string)
  (flags :unsigned-long)
  (buffer-size :unsigned-long))

(cffi:defcfun ("jack_port_unregister" jack-port-unregister) :int
  (client :pointer)
  (port :pointer))

(cffi:defcfun ("jack_port_get_buffer" jack-port-get-buffer) :pointer
  (port :pointer)
  (arg1 :pointer))

(cffi:defcfun ("jack_port_uuid" jack-port-uuid) :pointer
  (port :pointer))

(cffi:defcfun ("jack_port_name" jack-port-name) :string
  (port :pointer))

(cffi:defcfun ("jack_port_short_name" jack-port-short-name) :string
  (port :pointer))

(cffi:defcfun ("jack_port_flags" jack-port-flags) :int
  (port :pointer))

(cffi:defcfun ("jack_port_type" jack-port-type) :string
  (port :pointer))

(cffi:defcfun ("jack_port_type_id" jack-port-type-id) :pointer
  (port :pointer))

(cffi:defcfun ("jack_port_is_mine" jack-port-is-mine) :int
  (client :pointer)
  (port :pointer))

(cffi:defcfun ("jack_port_connected" jack-port-connected) :int
  (port :pointer))

(cffi:defcfun ("jack_port_connected_to" jack-port-connected-to) :int
  (port :pointer)
  (port-name :string))

(cffi:defcfun ("jack_port_get_connections" jack-port-get-connections) :pointer
  (port :pointer))

(cffi:defcfun ("jack_port_get_all_connections" jack-port-get-all-connections) :pointer
  (client :pointer)
  (port :pointer))

(cffi:defcfun ("jack_port_tie" jack-port-tie) :int
  (src :pointer)
  (dst :pointer))

(cffi:defcfun ("jack_port_untie" jack-port-untie) :int
  (port :pointer))

(cffi:defcfun ("jack_port_set_name" jack-port-set-name) :int
  (port :pointer)
  (port-name :string))

(cffi:defcfun ("jack_port_rename" jack-port-rename) :int
  (client :pointer)
  (port :pointer)
  (port-name :string))

(cffi:defcfun ("jack_port_set_alias" jack-port-set-alias) :int
  (port :pointer)
  (alias :string))

(cffi:defcfun ("jack_port_unset_alias" jack-port-unset-alias) :int
  (port :pointer)
  (alias :string))

(cffi:defcfun ("jack_port_get_aliases" jack-port-get-aliases) :int
  (port :pointer)
  (aliases :pointer))

(cffi:defcfun ("jack_port_request_monitor" jack-port-request-monitor) :int
  (port :pointer)
  (onoff :int))

(cffi:defcfun ("jack_port_request_monitor_by_name" jack-port-request-monitor-by-name) :int
  (client :pointer)
  (port-name :string)
  (onoff :int))

(cffi:defcfun ("jack_port_ensure_monitor" jack-port-ensure-monitor) :int
  (port :pointer)
  (onoff :int))

(cffi:defcfun ("jack_port_monitoring_input" jack-port-monitoring-input) :int
  (port :pointer))

(cffi:defcfun ("jack_connect" jack-connect) :int
  (client :pointer)
  (source-port :string)
  (destination-port :string))

(cffi:defcfun ("jack_disconnect" jack-disconnect) :int
  (client :pointer)
  (source-port :string)
  (destination-port :string))

(cffi:defcfun ("jack_port_disconnect" jack-port-disconnect) :int
  (client :pointer)
  (port :pointer))

(cffi:defcfun ("jack_port_name_size" jack-port-name-size) :int)

(cffi:defcfun ("jack_port_type_size" jack-port-type-size) :int)

(cffi:defcfun ("jack_port_type_get_buffer_size" jack-port-type-get-buffer-size) :pointer
  (client :pointer)
  (port-type :string))

(cffi:defcfun ("jack_port_set_latency" jack-port-set-latency) :void
  (port :pointer)
  (arg1 :pointer))

(cffi:defcfun ("jack_port_get_latency_range" jack-port-get-latency-range) :void
  (port :pointer)
  (mode :pointer)
  (range :pointer))

(cffi:defcfun ("jack_port_set_latency_range" jack-port-set-latency-range) :void
  (port :pointer)
  (mode :pointer)
  (range :pointer))

(cffi:defcfun ("jack_recompute_total_latencies" jack-recompute-total-latencies) :int
  (client :pointer))

(cffi:defcfun ("jack_port_get_latency" jack-port-get-latency) :pointer
  (port :pointer))

(cffi:defcfun ("jack_port_get_total_latency" jack-port-get-total-latency) :pointer
  (client :pointer)
  (port :pointer))

(cffi:defcfun ("jack_recompute_total_latency" jack-recompute-total-latency) :int
  (arg0 :pointer)
  (port :pointer))

(cffi:defcfun ("jack_get_ports" jack-get-ports) :pointer
  (client :pointer)
  (port-name-pattern :string)
  (type-name-pattern :string)
  (flags :unsigned-long))

(cffi:defcfun ("jack_port_by_name" jack-port-by-name) :pointer
  (client :pointer)
  (port-name :string))

(cffi:defcfun ("jack_port_by_id" jack-port-by-id) :pointer
  (client :pointer)
  (port-id :pointer))

(cffi:defcfun ("jack_frames_since_cycle_start" jack-frames-since-cycle-start) :pointer
  (arg0 :pointer))

(cffi:defcfun ("jack_frame_time" jack-frame-time) :pointer
  (arg0 :pointer))

(cffi:defcfun ("jack_last_frame_time" jack-last-frame-time) :pointer
  (client :pointer))

(cffi:defcfun ("jack_get_cycle_times" jack-get-cycle-times) :int
  (client :pointer)
  (current-frames :pointer)
  (current-usecs :pointer)
  (next-usecs :pointer)
  (period-usecs :pointer))

(cffi:defcfun ("jack_frames_to_time" jack-frames-to-time) :pointer
  (client :pointer)
  (arg1 :pointer))

(cffi:defcfun ("jack_time_to_frames" jack-time-to-frames) :pointer
  (client :pointer)
  (arg1 :pointer))

(cffi:defcfun ("jack_get_time" jack-get-time) :pointer)

(cffi:defcvar ("jack_error_callback" jack-error-callback)
 :pointer)

(cffi:defcfun ("jack_set_error_function" jack-set-error-function) :void
  (func :pointer))

(cffi:defcvar ("jack_info_callback" jack-info-callback)
 :pointer)

(cffi:defcfun ("jack_set_info_function" jack-set-info-function) :void
  (func :pointer))

(cffi:defcfun ("jack_free" jack-free) :void
  (ptr :pointer))


