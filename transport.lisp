;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :jack-transport)

;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("jack_release_timebase" jack-release-timebase) :int
  (client :pointer))

(cffi:defcfun ("jack_set_sync_callback" jack-set-sync-callback) :int
  (client :pointer)
  (sync-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_set_sync_timeout" jack-set-sync-timeout) :int
  (client :pointer)
  (timeout :pointer))

(cffi:defcfun ("jack_set_timebase_callback" jack-set-timebase-callback) :int
  (client :pointer)
  (conditional :int)
  (timebase-callback :pointer)
  (arg :pointer))

(cffi:defcfun ("jack_transport_locate" jack-transport-locate) :int
  (client :pointer)
  (frame jack-nframes-t))

(cffi:defcfun ("jack_transport_query" jack-transport-query) jack-transport-state-t
  (client :pointer)
  (pos (:pointer (:struct jack-position))))

(cffi:defcfun ("jack_transport_query" jack-transport-query) :int
  (client :pointer)
  (pos (:pointer (:struct jack-position))))


(cffi:defcfun ("jack_get_current_transport_frame" jack-get-current-transport-frame) jack-nframes-t
  (client :pointer))

(cffi:defcfun ("jack_transport_reposition" jack-transport-reposition) :int
  (client :pointer)
  (pos :pointer))

(cffi:defcfun ("jack_transport_start" jack-transport-start) :void
  (client :pointer))

(cffi:defcfun ("jack_transport_stop" jack-transport-stop) :void
  (client :pointer))

(cffi:defcfun ("jack_get_transport_info" jack-get-transport-info) :void
  (client :pointer)
  (tinfo :pointer))

(cffi:defcfun ("jack_set_transport_info" jack-set-transport-info) :void
  (client :pointer)
  (tinfo :pointer))


